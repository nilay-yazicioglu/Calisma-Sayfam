Imperative (Emirsel) Programlama
Imperative programlama, "ne yapılacağını değil, nasıl yapılacağını" anlatan bir yaklaşımdır. Yani, bu yaklaşımda bir işlem ya da problemi çözerken, 
adım adım yapılacak işlemler sırasıyla belirtilir. Kodu yazan kişi, bilgisayara ne yapması gerektiğini ve nasıl yapması gerektiğini açıkça söyler.

Ne demek?: Programcı, her bir adımı tek tek tanımlar ve bilgisayara bu adımları nasıl gerçekleştireceğini söyler.

Kodu nasıl yazarsınız?: Adım adım, işlem sırasını belirler, kontroller ekler ve yan etkilerle birlikte işlemi kontrol edersiniz.

Declarative (Açıklayıcı) Programlama
Declarative programlama, "ne yapılması gerektiği" ile ilgilidir. Bu yaklaşımda, programcı ne yapmak istediğini belirtir, 
ancak nasıl yapılacağını bilgisayara bırakır. Yani, programcı yalnızca sonuca odaklanır ve bu sonuca nasıl ulaşılacağını detaylı bir şekilde belirtmez.

Ne demek?: Programcı, hedefi tanımlar, ancak hedefe ulaşmak için gereken adımları bilgisayara bırakır.

Kodu nasıl yazarsınız?: Daha az kontrol yapar, daha yüksek seviyeli soyutlamalar kullanılır ve genellikle daha kısa ve daha anlaşılır kod yazılır.

REACT = Declarative bir UI ( kullanıcı arayüzü kütüphanesi ) UI = User interface 
REACT AMAÇLARI 
-componentlerle çalışmayı kolaylaştırmak,
-DOM işlemlerini daha performanslı yapmayı sağlamak,
-Kodların yönetebilirliğini arttırmak,

JSX formatı nedir? 
-HTML, CSS ve JSyi aynı dosyada yazılabildiği dosya formatı. 

Virtual DOM:Sayfadaki  etkileşimleri hızlı ve performanslı yapmak için bir yöntem.

JSX ÖZELLİKLERİ:
hem js özelliklerini kullanabileyim hem de html dosyasının sınıflama yapısını kullanayım. Bu ikisini birleştirmişler jsx çıkmış ortaya.
!!! browser js içindeki html dosyalarını okuyamaz ve hata verir.
BABEL= JSX kodlarını browserın anlayacağını js kodlarına çevirir. Tercüman gibi düşün. Çevirmen kütüphane.
!React componentlerle birlikte kod okuması daha kolay hale geliyor. 
Babeli kullanırken <script type="text/babel"> bunu eklemeyi unutma. 
-render etmek sayfaya eklemek gibi düşünebilirsin.
-jsx kodunda bir süslü parantez varsa bil ki orada jsden bir özellik kullanmaya çalışıyoruz {} 
-return bölümü js içindeki bir DOM penceresi gibi düşünülebilir. {} ile return  edilen kodun içinde js dünyasına bir pencere açıp js yazabilirsin. 
fakat return içinde olduğun için kısa ve return eden şeyler yazılabiliir. ternary if veya and or && gibi operatörler kullanılabilir.
-reactta component jsx return eden bir fonksiyon anlamına gelir.
fonksiyon haline getirince;
-yazdığımız kod component haline gelince fonksiyon isminin ilk harfi BÜYÜK yazılır.React onun normal bir html elemanı değil component olduğunu anlasın diye.
-sayfaya yerleştirilirken (render edilirken) html elemanı gibi <> arasına yazılır.

!!!! jsx dosyalarını isimlendirme nasıl yapılır ?
index.js ve index.jsx her ikisi de kullanılabilir, ancak index.js daha yaygın ve standarttır.
JSX kullandığınız dosyalar için .jsx uzantısını kullanabilirsiniz, ancak çoğu zaman .js uzantısı yeterlidir ve JSX'i de içerir.

React'ta Bileşen (Component), bir kullanıcı arayüzü parçasını temsil eden bağımsız ve yeniden kullanılabilir bir yapıdır. 
React, UI'yi bileşenler halinde tasarlar ve her bileşen, kullanıcıya gösterilen bir kısım olabilir. React'ta bileşenler, 
hem görsel (UI) kısmı hem de bileşenin işlevsel mantığını içerir.
!!! bir kodun component olduğunu nereden anlarsın ? Componentler büyük harfle başlar.HTML elemanları (<div>, <img> vs...) ise küçük harfle başlar.


Bileşenler, genellikle JavaScript fonksiyonları veya sınıfları (class) olarak tanımlanır ve kullanıcı arayüzündeki belirli bir bölümü temsil ederler.
Bileşenlerin amacı, belirli bir işlevi yerine getirmek, kullanıcı etkileşimini yönetmek ve UI öğelerini (metin, butonlar, form elemanları, vb.) render etmektir.

REACT COMPONENT ANATOMİSİ 
-JSX return eden fonksiyonlar,
-Kendi fonksiyonları olabilir,
-Reactın özel fonksiyonlarını kullanabilir (hooks)
!!! bir component görüyorsam bu ne return ediyor sayfaya ne ekliyor ? Bunlar aklına gelsin.

Reactta neden componentler oluşturuyoruz? 
-tekrar kullanılabilirlik,
-durum yönetimi (react componentleri yani bileşenleri her bileşenin kendi durumunu yönetmesine olanak sağlar)
-performans iyileştirmesi,
-deklaratif programlama ( bunun sonuç odaklı bir programlama olduğunu hatırla) 


!!! REACT JSX formatında bir fonksiyon döndürmelidir. 

Click eventi ile çalışmak;
-normalde addeventlistener kullanıyoruz reactta ise bunu onClick={çalışacak fonksiyon} ekle bu şunla aynı şey onClick={event => calisacakFonksiyon(event)}


STATE KAVRAMI VE ÖZELLİKLERİN + EXPORT IMPORT İŞLEMLERİNİ COMMIT ETMEYİ UNUTMUŞSUN !!! O YÜZDEN O VİDEOLAR TEKRAR İZLENİLİP NOT ALINCAK

reactın 3 temel elemanı;
-component:yeniden kullanılabilir kod parçaları, legolar gibi düşün.
-state: componentlerin hafızalrı, interaktifliğin temeli,
-props:componentler arası veri paylaşımı (html elemanlarındaki attribute konseptine benzer, fonksiyonlardaki parametre kullanımına benzer ) 
props proportiesin kısaltması props.

Props kavramı:
-react componentleri birbiri ile iletişim kurmak için props kullanır.
-her parent compenent, child componentlerina props vererek onlara bazı bilgiler aktarabilir. 
-props, var olan html attributelarını kapsar, ancak yalnızca onlarla sınırlı değildir.
-props ile her türlü js değerini, objeleri, dizileri ve fonksiyonları aktarabiliriz.

prop nasıl yazılır ?
<BileşenAdi propAdi={değer} />

Nerede? | Ne yapıyoruz?
Kullandığımız yerde | <Card kisi={person} /> → Prop'u yazıyoruz
Bileşen tanımında | function Card({ kisi }) → Prop'u alıyoruz

state: bileşenin hafızasıdır.React'te state, bir bileşenin (component) o anki durumunu temsil eder.
Yani kullanıcıyla etkileşim sonucu değişebilecek, bileşenin davranışını ve görüntüsünü etkileyen 
verileri saklamak için kullanılır. 
!!! bir componentin içinde props tanımlanır ve çocuk componente aktarılır. (reactta props componente nasıl geçirilir)

destructuring : propsun içinden parçalara ayırıp onları bir değişkene atıyoruz buna da destructuring denir, js özelliğidir 
react özelliği değildir, reactta çok kullanılır. props.person (person örnek olsun diye) yazmanın kısa yoludur. component adından sonraki 
normal parantezler arasına süslü parantez koymaya dikkat !!! 

PROPS ÖZELLİKLERİ 
1-html elemanlarının sahip oldukları attributeler
2-bizim tanımladığımız proplar
3-child prop (component tagleri arasında kalan kısım )

!!! proplar child componentler içinde okunabilir ama değiştirilemez.Değişikleri parent componentinde yapmalısın

!!! react uygulamalarında veri parent componenttan child componente doğru akar.Parentta saklanır 
child componentlere dağılır 
state kaldırmak : childdaki veriyi parente taşımak.(kolay yönetim için tek yöne akan trafik gibi)

Parenttaki veriyi nasıl değiştiririz ? 
-veri akışı tek yönlü olduğu için veriyi direkt parente iletemeyiz.
-ne yapmalısın ? -> anahtarını kaybeden adam örneğini hatırla
parent içindeki veriyi değiştiren bir fonksiyonu child prop olarak iletmelisin. 




